import { defineStore } from 'pinia'
import { ref } from 'vue'
import { Window } from '@tauri-apps/api/window'
import type { Router } from 'vue-router'
import mitt from '@/utils/mitt'
import { memoryOptimizer } from '@/utils/memory-optimization'

// Á™óÂè£Áä∂ÊÄÅÁ±ªÂûã
export interface WindowState {
  isVisible: boolean
  isFullscreen: boolean
  isMaximized: boolean
  lastVisiblePath: string
}

export const useWindowStore = defineStore(
  'window',
  () => {
    // Á™óÂè£Áä∂ÊÄÅ
    const windowState = ref<WindowState>({
      isVisible: true,
      isFullscreen: false,
      isMaximized: false,
      lastVisiblePath: '/',
    })

    // Ëé∑ÂèñÂ∫îÁî®Á™óÂè£
    const getAppWindow = () => Window.getCurrent()

    // ÊúÄÂ∞èÂåñÁ™óÂè£
    const minimizeWindow = async () => {
      const appWindow = getAppWindow()
      await appWindow.minimize()
      // Ëß¶ÂèëÊúÄÂ∞èÂåñ‰∫ã‰ª∂
      mitt.emit('window-minimize')
    }

    // ÈöêËóèÁ™óÂè£
    const hideWindow = async () => {
      const appWindow = getAppWindow()
      await appWindow.hide()
      windowState.value.isVisible = false
      // Ëß¶ÂèëÈöêËóè‰∫ã‰ª∂
      mitt.emit('window-hide')
    }

    // ÊòæÁ§∫Á™óÂè£
    const showWindow = async () => {
      const appWindow = getAppWindow()
      await appWindow.show()
      await appWindow.setFocus()
      windowState.value.isVisible = true
      // Ëß¶ÂèëÊòæÁ§∫‰∫ã‰ª∂
      mitt.emit('window-show')
    }

    // ËÆæÁΩÆÁ™óÂè£ÁΩÆÈ°∂
    const setWindowAlwaysOnTop = async () => {
      const appWindow = getAppWindow()
      await appWindow.setAlwaysOnTop(true)
    }

    // Ëé∑ÂèñÁ™óÂè£ÂèØËßÅÁä∂ÊÄÅ
    const getWindowVisible = async () => {
      const appWindow = getAppWindow()
      return await appWindow.isVisible()
    }

    // ÂàáÊç¢ÂÖ®Â±èÊ®°Âºè
    const toggleFullScreen = async () => {
      const appWindow = getAppWindow()
      const isFullscreen = await appWindow.isFullscreen()

      if (isFullscreen) {
        await appWindow.setFullscreen(false)
      } else {
        await appWindow.setFullscreen(true)
      }

      windowState.value.isFullscreen = !isFullscreen
    }

    // ÊúÄÂ§ßÂåñÁ™óÂè£
    const maximizeWindow = async () => {
      const appWindow = getAppWindow()
      await appWindow.maximize()
      windowState.value.isMaximized = true
      // Ëß¶ÂèëÊúÄÂ§ßÂåñ‰∫ã‰ª∂
      mitt.emit('window-maximize')
    }

    // ËøòÂéüÁ™óÂè£
    const unmaximizeWindow = async () => {
      const appWindow = getAppWindow()
      await appWindow.unmaximize()
      windowState.value.isMaximized = false
      // Ëß¶ÂèëËøòÂéü‰∫ã‰ª∂
      mitt.emit('window-unmaximize')
    }

    // ÂàáÊç¢ÊúÄÂ§ßÂåñÁä∂ÊÄÅ
    const toggleMaximize = async () => {
      const appWindow = getAppWindow()
      const isMaximized = await appWindow.isMaximized()

      if (isMaximized) {
        await unmaximizeWindow()
      } else {
        await maximizeWindow()
      }
    }

    // Ê£ÄÊü•Á™óÂè£Áä∂ÊÄÅ
    const updateWindowState = async () => {
      const appWindow = getAppWindow()
      try {
        const [isVisible, isFullscreen, isMaximized] = await Promise.all([
          appWindow.isVisible(),
          appWindow.isFullscreen(),
          appWindow.isMaximized(),
        ])

        windowState.value.isVisible = isVisible
        windowState.value.isFullscreen = isFullscreen
        windowState.value.isMaximized = isMaximized
      } catch (error) {
        console.error('Êõ¥Êñ∞Á™óÂè£Áä∂ÊÄÅÂ§±Ë¥•:', error)
      }
    }

    // ‰øùÂ≠òË∑ØÁî±Áä∂ÊÄÅÂπ∂ÂàáÊç¢Âà∞Á©∫ÁôΩÈ°µ
    const saveRouteAndGoBlank = (router: Router) => {
      windowState.value.lastVisiblePath = router.currentRoute.value.path
      if (windowState.value.lastVisiblePath !== '/blank') {
        router.push('/blank')
      }
    }

    // ‰ªéÁ©∫ÁôΩÈ°µÊÅ¢Â§çÂà∞‰∏äÊ¨°ÁöÑË∑ØÁî±
    const restoreFromBlank = (router: Router) => {
      if (router.currentRoute.value.path === '/blank' && windowState.value.lastVisiblePath) {
        console.log(`‰ªéÁ©∫ÁôΩÈ°µÊÅ¢Â§çÂà∞‰πãÂâçË∑ØÂæÑ: ${windowState.value.lastVisiblePath}`)
        router.push(windowState.value.lastVisiblePath)
      } else {
        console.log(`ÂΩìÂâçË∑ØÂæÑÈùûÁ©∫ÁôΩÈ°µÊàñÊ≤°Êúâ‰øùÂ≠òÁöÑË∑ØÂæÑ: ${router.currentRoute.value.path}`)
      }
    }

    // ËÆæÁΩÆÁ™óÂè£‰∫ã‰ª∂Â§ÑÁêÜÂô®
    const setupWindowEventHandlers = (router: Router) => {
      // Á™óÂè£ÈöêËóèÊó∂ÂàáÊç¢Âà∞Á©∫ÁôΩÈ°µÂπ∂Ëß¶ÂèëÂÜÖÂ≠òÊ∏ÖÁêÜ
      mitt.on('window-hide', () => {
        console.log(`‰øùÂ≠òÂΩìÂâçË∑ØÂæÑÂπ∂ÂàáÊç¢Âà∞Á©∫ÁôΩÈ°µ: ${router.currentRoute.value.path}`)
        saveRouteAndGoBlank(router)

        // Âª∂ËøüËß¶ÂèëÂÜÖÂ≠òÊ∏ÖÁêÜÔºåÁªôÈ°µÈù¢ÂàáÊç¢‰∏Ä‰∫õÊó∂Èó¥
        setTimeout(() => {
          console.log('üßπ Á™óÂè£ÈöêËóèÔºåËß¶ÂèëÂÜÖÂ≠òÊ∏ÖÁêÜ')
          mitt.emit('memory-cleanup-requested')
        }, 1000)
      })

      // Á™óÂè£ÊòæÁ§∫Êó∂ÊÅ¢Â§çË∑ØÁî±Âπ∂ÊÅ¢Â§çÂõæÁâáËµÑÊ∫ê
      mitt.on('window-show', () => {
        console.log('Êé•Êî∂Âà∞Á™óÂè£ÊòæÁ§∫‰∫ã‰ª∂ÔºåÂáÜÂ§áÊÅ¢Â§çË∑ØÁî±')
        restoreFromBlank(router)

        // ÊÅ¢Â§çÂõæÁâáËµÑÊ∫ê
        setTimeout(() => {
          memoryOptimizer.restoreImageResources()
        }, 500)
      })

      // Á™óÂè£ÊÅ¢Â§çÊó∂ÊÅ¢Â§çË∑ØÁî±
      mitt.on('window-restore', () => {
        console.log('Êé•Êî∂Âà∞Á™óÂè£ÊÅ¢Â§ç‰∫ã‰ª∂ÔºåÂáÜÂ§áÊÅ¢Â§çË∑ØÁî±')
        restoreFromBlank(router)
      })

      // Á™óÂè£ÊúÄÂ§ßÂåñ‰∫ã‰ª∂
      mitt.on('window-maximize', () => {
        console.log('Á™óÂè£Â∑≤ÊúÄÂ§ßÂåñ')
        updateWindowState()
      })

      // Á™óÂè£ËøòÂéü‰∫ã‰ª∂
      mitt.on('window-unmaximize', () => {
        console.log('Á™óÂè£Â∑≤ËøòÂéü')
        updateWindowState()
      })

      // Ê£ÄÊü•ÂΩìÂâçÁ™óÂè£Áä∂ÊÄÅ
      updateWindowState().then(() => {
        if (windowState.value.isVisible) {
          restoreFromBlank(router)
        }
      })
    }

    // Ê∏ÖÁêÜÁ™óÂè£‰∫ã‰ª∂ÁõëÂê¨
    const cleanupWindowEvents = () => {
      mitt.off('window-minimize')
      mitt.off('window-hide')
      mitt.off('window-show')
      mitt.off('window-restore')
      mitt.off('window-maximize')
      mitt.off('window-unmaximize')
    }

    return {
      windowState,
      getAppWindow,
      minimizeWindow,
      maximizeWindow,
      unmaximizeWindow,
      toggleMaximize,
      updateWindowState,
      hideWindow,
      showWindow,
      setWindowAlwaysOnTop,
      getWindowVisible,
      toggleFullScreen,
      saveRouteAndGoBlank,
      restoreFromBlank,
      setupWindowEventHandlers,
      cleanupWindowEvents,
    }
  },
  {
    persist: true,
  },
)
